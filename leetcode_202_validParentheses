DESCRIPTION:

Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.

An input string is valid if:

Open brackets must be closed by the same type of brackets.
Open brackets must be closed in the correct order.
Every close bracket has a corresponding open bracket of the same type.
 

Example 1:

Input: s = "()"
Output: true
Example 2:

Input: s = "()[]{}"
Output: true
Example 3:

Input: s = "(]"
Output: false
 

Constraints:

1 <= s.length <= 104
s consists of parentheses only '()[]{}'.




SOLUTION IN JAVA:


class Solution {
    public boolean isValid(String s) {
        Stack<Character> openP = new Stack<>();

        for(int i = 0; i < s.length(); i++) {
            char bracket = s.charAt(i);
            if (bracket == '(' || bracket == '{' || bracket == '[') {
                openP.push(bracket);
            } else if (openP.isEmpty()) {
                return false;
            } else if (bracket == ')' && openP.peek() == '(') {
                openP.pop();
            } else if (bracket == ']' && openP.peek() == '[') {
                openP.pop();
            } else if (bracket == '}' && openP.peek() == '{') {
                openP.pop();
            } else {
                return false;
            }
    }
  
    return openP.isEmpty() ? true : false;
 }

}
Console
