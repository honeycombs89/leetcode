DESCRIPTION:
Given a string s, find the length of the longest 
substring
 without repeating characters.

 

Example 1:

Input: s = "abcabcbb"
Output: 3
Explanation: The answer is "abc", with the length of 3.
Example 2:

Input: s = "bbbbb"
Output: 1
Explanation: The answer is "b", with the length of 1.
Example 3:

Input: s = "pwwkew"
Output: 3
Explanation: The answer is "wke", with the length of 3.
Notice that the answer must be a substring, "pwke" is a subsequence and not a substring.
 

Constraints:

0 <= s.length <= 5 * 104
s consists of English letters, digits, symbols and spaces.



* SOLUTION IN JAVA *

*/ FAST SOLUTION /*
class Solution {
    public int lengthOfLongestSubstring(String s) {
        int maxLength = 0;

        for(int i = 0; i < s.length(); i++) {
            StringBuilder currentSubstring = new StringBuilder();
            for(int j = i; j < s.length(); j++){
                if(currentSubstring.indexOf(String.valueOf(s.charAt(j))) !=-1) {
                    break;
                }

                currentSubstring.append(s.charAt(j));
                maxLength = Math.max(maxLength, currentSubstring.length());
                }
            }

            return maxLength;

        }
    }
    
    
    */ HashMap (2 pointers-sliding window)
    
    abcabcd
    
    Map            
                  Max = 1
    a -> 3        Max = 2
    b -> 4        Max = 3
    c -> 5        Max = 4
    d -> 6
    /*
    
    Linear Time: On
    
    
    
   */ Solution /*
   
   class Solution {
    public int lengthOfLongestSubstring(String s) {
        int maxLength = 0;

Map<Character, Integer> visitedCharacters = new HashMap<>();
        for(int right = 0, left = 0; right < s.length(); right++) {
            char currentCharacter = s.charAt(right);
            if(visitedCharacters.containsKey(currentCharacter) && 
            visitedCharacters.get(currentCharacter) >= left) {
                left = visitedCharacters.get(currentCharacter) + 1;
                }
                maxLength = Math.max(maxLength, right - left + 1);
                visitedCharacters.put(currentCharacter,right);
            }

            return maxLength;

        }
    }
    
